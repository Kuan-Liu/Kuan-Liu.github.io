{
  "hash": "7ebd0a72e596c7ba340bffaf1002c0c6",
  "result": {
    "markdown": "---\ntitle: \"Creating static and interactive Nightingale rose diagram\"\ndescription: |\n  Creating static and interactive Nightingale rose diagram using ggplot and plotly in R\ndate: \"2022-11-28\"\ncategories: [R, Data Visualization, statistical consulting]\n---\n\n\n## 1. Creating Nightingale rose diagram using ggplot (static figure)\n\n-  This plot is also called Wind Rose and Coxcomb diagram.\n\n-  This diagram was developed by [Florence Nightingale (1820-1910)](https://en.wikipedia.org/wiki/Florence_Nightingale), a statistician, nurse and social reformer who was the foundational philosopher of modern nursing.\n\n-  For demonstration purpose, I will simulate a simple data inspired by the example figure.\n\n-  Suppose we have three variables in our data\n    -  Year: 2016 to 2021\n    -  Instruments of health: physical, mental and social\n    -  my self-reported measure of health by instruments: a score between 1 and 5, where 5 represents the highest level of self-reported health\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(DT)\n\nset.seed(123)\ndat <- tibble(\n  Year = paste0(\"Y\",rep(2016:2021, each=3)),\n  Instrument = rep(c(\"physical\",\"mental\",\"social\"),6),\n  Score = sample(1:5, size = 3*6, replace = T))\n\ndat %>% datatable(\n  rownames = FALSE,\n  options = list(\n    columnDefs = list(list(className = 'dt-center', \n                      targets = 0:2))))\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-62471906a988fdd2a34d\" style=\"width:100%;height:auto;\" class=\"datatables html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-62471906a988fdd2a34d\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"Y2016\",\"Y2016\",\"Y2016\",\"Y2017\",\"Y2017\",\"Y2017\",\"Y2018\",\"Y2018\",\"Y2018\",\"Y2019\",\"Y2019\",\"Y2019\",\"Y2020\",\"Y2020\",\"Y2020\",\"Y2021\",\"Y2021\",\"Y2021\"],[\"physical\",\"mental\",\"social\",\"physical\",\"mental\",\"social\",\"physical\",\"mental\",\"social\",\"physical\",\"mental\",\"social\",\"physical\",\"mental\",\"social\",\"physical\",\"mental\",\"social\"],[3,3,2,2,3,5,4,1,2,3,5,3,3,1,4,1,1,5]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>Year<\\/th>\\n      <th>Instrument<\\/th>\\n      <th>Score<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-center\",\"targets\":[0,1,2]}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n- we plot year as our rays (or rose petals) and instruments as stacked bars with height representing the scores.\n\n- Adding labels on top of each ray. This step requires we position the label using angle degrees.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(viridis)\n\np <- ggplot(dat) +  \n  # Add the stacked bar\n  geom_bar(aes(x=Year, y=Score, fill=Instrument), stat=\"identity\", size=0.6, color=\"white\") +\n  scale_fill_viridis(discrete=TRUE, direction = 1, option = \"C\", name=\"Health Instrument\") +\n  ylim(0,15) + #using -1 as the lower bound to leave space in the centre of the polar\n  coord_polar() +\n  theme(\n    panel.background = element_rect(fill = \"white\", colour = \"white\"),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.border = element_blank(),\n    axis.line = element_blank(),\n    axis.ticks = element_blank(),\n    legend.position = \"right\",\n    legend.text = element_text(size=18), #large font for website display\n    legend.title = element_text(size=20), #large font for website display\n    axis.text = element_blank(),\n    axis.title = element_blank()) \n\n# Add labels on top of each bar\nlabel_data <- dat %>% group_by(Year) %>% summarize(Tot=sum(Score))\nangle= round(90 - 360 * (c(1:nrow(label_data))-0.5) /nrow(label_data),0)     # I substract 0.5 because the letter must have the angle of the centre of the bars. Not extreme right(1) or extreme left (0)\nlabel_data$hjust<-ifelse(angle < -90, 1, 0)\nlabel_data$angle<-ifelse(angle < -90, angle+180, angle)\n\np + geom_text(data=label_data, aes(x=Year, y=Tot+0.5, label=Year, hjust=hjust),\n            color=\"black\", size=6, angle= label_data$angle, inherit.aes = FALSE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){fig-align='center' width=864}\n:::\n:::\n\n\n## 2. Creating interactive Nightingale rose diagram using plotly\n\n-  In Plotly, r means radius and theta means angle. To specify categorical angle labels and ticks, we need to input character variable. \n\n-  Because we specified theta to be categorical (representing variable Year), we need to define even breaks between 0 to 360 by the number of unique Years (6 years in this example) to place the angle labels. \n    -  This is controlled by setting `period = 6` under the layout option of polar.\n\n- The interactive feature of plotly is super nice! You can try scaling and rotating the plot!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(plotly)\n\nfig <- plot_ly() %>%\n  add_trace(\n    data = dat,\n    r = ~Score, #radius \n    theta = ~Year, #angle\n    type=\"barpolar\", \n    color = ~Instrument,\n    hovertemplate = paste('Score: %{r}',\n                        '<br>Year: %{theta}<br>')) %>%  \n  layout(\n    legend=list(title=list(text='Health Instrument')), \n    polar = list(angularaxis = list(\n      rotation = 90,\n      direction = 'clockwise', #position the polar diagram\n      period = 6)), #evenly distribute angles to host categorical var;\n    margin = 0.01) \nfig\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-502a66744b8e1fe96c06\" style=\"width:100%;height:464px;\" class=\"plotly html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-502a66744b8e1fe96c06\">{\"x\":{\"visdat\":{\"38c8115f7240\":[\"function () \",\"plotlyVisDat\"],\"38c83e6c1d21\":[\"function () \",\"data\"]},\"cur_data\":\"38c83e6c1d21\",\"attrs\":{\"38c83e6c1d21\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"r\":{},\"theta\":{},\"type\":\"barpolar\",\"color\":{},\"hovertemplate\":\"Score: %{r} <br>Year: %{theta}<br>\",\"inherit\":true}},\"layout\":{\"margin\":0.01,\"legend\":{\"title\":{\"text\":\"Health Instrument\"}},\"polar\":{\"angularaxis\":{\"rotation\":90,\"direction\":\"clockwise\",\"period\":6}},\"hovermode\":\"closest\",\"showlegend\":true},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"r\":[3,3,1,5,1,1],\"theta\":[\"Y2016\",\"Y2017\",\"Y2018\",\"Y2019\",\"Y2020\",\"Y2021\"],\"type\":\"barpolar\",\"hovertemplate\":[\"Score: %{r} <br>Year: %{theta}<br>\",\"Score: %{r} <br>Year: %{theta}<br>\",\"Score: %{r} <br>Year: %{theta}<br>\",\"Score: %{r} <br>Year: %{theta}<br>\",\"Score: %{r} <br>Year: %{theta}<br>\",\"Score: %{r} <br>Year: %{theta}<br>\"],\"name\":\"mental\",\"marker\":{\"color\":\"rgba(102,194,165,1)\",\"line\":{\"color\":\"rgba(102,194,165,1)\"}},\"frame\":null},{\"r\":[3,2,4,3,3,1],\"theta\":[\"Y2016\",\"Y2017\",\"Y2018\",\"Y2019\",\"Y2020\",\"Y2021\"],\"type\":\"barpolar\",\"hovertemplate\":[\"Score: %{r} <br>Year: %{theta}<br>\",\"Score: %{r} <br>Year: %{theta}<br>\",\"Score: %{r} <br>Year: %{theta}<br>\",\"Score: %{r} <br>Year: %{theta}<br>\",\"Score: %{r} <br>Year: %{theta}<br>\",\"Score: %{r} <br>Year: %{theta}<br>\"],\"name\":\"physical\",\"marker\":{\"color\":\"rgba(252,141,98,1)\",\"line\":{\"color\":\"rgba(252,141,98,1)\"}},\"frame\":null},{\"r\":[2,5,2,3,4,5],\"theta\":[\"Y2016\",\"Y2017\",\"Y2018\",\"Y2019\",\"Y2020\",\"Y2021\"],\"type\":\"barpolar\",\"hovertemplate\":[\"Score: %{r} <br>Year: %{theta}<br>\",\"Score: %{r} <br>Year: %{theta}<br>\",\"Score: %{r} <br>Year: %{theta}<br>\",\"Score: %{r} <br>Year: %{theta}<br>\",\"Score: %{r} <br>Year: %{theta}<br>\",\"Score: %{r} <br>Year: %{theta}<br>\"],\"name\":\"social\",\"marker\":{\"color\":\"rgba(141,160,203,1)\",\"line\":{\"color\":\"rgba(141,160,203,1)\"}},\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\n\n## R session information\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.1.3 (2022-03-10)\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\nRunning under: Windows 10 x64 (build 19044)\n\nMatrix products: \n\nlocale:\n[1] LC_COLLATE=English_Canada.1252  LC_CTYPE=English_Canada.1252   \n[3] LC_MONETARY=English_Canada.1252 LC_NUMERIC=C                   \n[5] LC_TIME=English_Canada.1252    \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] plotly_4.10.0     viridis_0.6.2     viridisLite_0.4.0 DT_0.22          \n [5] forcats_0.5.1     stringr_1.4.0     dplyr_1.0.8       purrr_0.3.4      \n [9] readr_2.1.2       tidyr_1.2.0       tibble_3.1.6      ggplot2_3.3.5    \n[13] tidyverse_1.3.1  \n```\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.5.4/htmlwidgets.js\"></script>\r\n<link href=\"../../site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/datatables-binding-0.22/datatables.js\"></script>\r\n<script src=\"../../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\r\n<link href=\"../../site_libs/dt-core-1.11.3/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\r\n<link href=\"../../site_libs/dt-core-1.11.3/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/dt-core-1.11.3/js/jquery.dataTables.min.js\"></script>\r\n<link href=\"../../site_libs/crosstalk-1.2.0/css/crosstalk.min.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/crosstalk-1.2.0/js/crosstalk.min.js\"></script>\r\n<script src=\"../../site_libs/plotly-binding-4.10.0/plotly.js\"></script>\r\n<script src=\"../../site_libs/typedarray-0.1/typedarray.min.js\"></script>\r\n<link href=\"../../site_libs/plotly-htmlwidgets-css-2.5.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/plotly-main-2.5.1/plotly-latest.min.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}